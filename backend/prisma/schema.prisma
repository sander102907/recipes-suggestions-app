generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "linux-musl"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Ingredient {
  id                 Int                  @id @default(autoincrement())
  ahId               Int?                 @unique @map("ah_id")
  name               String               @db.VarChar(100)
  unitSize           String?              @map("unit_size") @db.VarChar(50)
  price              Float?               @db.Float
  category           String?              @db.VarChar(50)
  isBonus            Boolean?             @map("is_bonus")
  bonusMechanism     String?              @map("bonus_mechanism") @db.VarChar(50)
  bonusPrice         Float?               @map("bonus_price") @db.Float
  image              String?              @db.VarChar(200)
  ingredientsInGroup IngredientsInGroup[]

  IngredientPriceHistory IngredientPriceHistory[]
  @@map("ingredient")
}

model IngredientsInGroup {
  groupId                Int                    @map("group_id")
  ingredientId           Int                    @map("ingredient_id")
  amount                 Int                    @default(1)
  recipeIngredientsGroup RecipeIngredientsGroup @relation(fields: [groupId], references: [id], onDelete: Cascade, map: "ingredients_in_group_ibfk_1")
  ingredient             Ingredient             @relation(fields: [ingredientId], references: [id], onDelete: Cascade, map: "ingredients_in_group_ibfk_2")

  @@id([groupId, ingredientId])
  @@index([ingredientId], map: "ingredient_id")
  @@map("ingredients_in_group")
}

model Recipe {
  id                      Int                      @id @default(autoincrement())
  name                    String                   @db.VarChar(100)
  image                   File?                    @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  description             String?                  @db.MediumText
  isSuggested             Boolean?                 @map("is_suggested")
  excludeFromSuggestions  Boolean?                 @map("exclude_from_suggestions")
  suggestionEndDate       DateTime?                @map("suggestion_end_date") @db.Date
  rating                  Int?
  recipeIngredientsGroups RecipeIngredientsGroup[]

  imageId Int?
  @@map("recipe")
}

model RecipeIngredientsGroup {
  id                 Int                  @id @default(autoincrement())
  recipeId           Int                  @map("recipe_id")
  recipe             Recipe               @relation(fields: [recipeId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "tb_fk")
  ingredientsInGroup IngredientsInGroup[]

  @@index([recipeId], map: "tb_fk")
  @@map("recipe_ingredients_group")
}

model File {
  id        Int      @id @default(autoincrement())
  path      String   @unique @db.VarChar(200)
  mimetype  String
  createdAt DateTime
  size      Int
  Recipe    Recipe[]
}

model IngredientPriceHistory {
  id             Int        @id @default(autoincrement())
  price          Float
  isBonus        Boolean
  bonusMechanism String?
  from           DateTime
  until          DateTime?
  ingredient     Ingredient @relation(fields: [ingredientId], references: [id])

  ingredientId Int
}
